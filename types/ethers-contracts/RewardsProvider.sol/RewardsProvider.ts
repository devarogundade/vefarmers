/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../common.js"
  

  export interface RewardsProviderInterface extends Interface {
    getFunction(nameOrSignature: "appId" | "rate" | "rewardsPool" | "setAppId" | "setRate" | "setRewardsPool"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "AppIdChanged" | "RateChanged" | "RewardsPoolChanged"): EventFragment;

    encodeFunctionData(functionFragment: 'appId', values?: undefined): string;
encodeFunctionData(functionFragment: 'rate', values?: undefined): string;
encodeFunctionData(functionFragment: 'rewardsPool', values?: undefined): string;
encodeFunctionData(functionFragment: 'setAppId', values: [BytesLike]): string;
encodeFunctionData(functionFragment: 'setRate', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'setRewardsPool', values: [AddressLike]): string;

    decodeFunctionResult(functionFragment: 'appId', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'rate', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'rewardsPool', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setAppId', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setRate', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setRewardsPool', data: BytesLike): Result;
  }

  
    export namespace AppIdChangedEvent {
      export type InputTuple = [appId: BytesLike];
      export type OutputTuple = [appId: string];
      export interface OutputObject {appId: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RateChangedEvent {
      export type InputTuple = [newRate: BigNumberish];
      export type OutputTuple = [newRate: bigint];
      export interface OutputObject {newRate: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RewardsPoolChangedEvent {
      export type InputTuple = [newRewardsPool: AddressLike];
      export type OutputTuple = [newRewardsPool: string];
      export interface OutputObject {newRewardsPool: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface RewardsProvider extends BaseContract {
    
    connect(runner?: ContractRunner | null): RewardsProvider;
    waitForDeployment(): Promise<this>;

    interface: RewardsProviderInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    appId: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    rate: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    rewardsPool: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    setAppId: TypedContractMethod<
      [newAppId: BytesLike, ],
      [void],
      'nonpayable'
    >
    

    
    setRate: TypedContractMethod<
      [newRate: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    setRewardsPool: TypedContractMethod<
      [newRewardsPool: AddressLike, ],
      [void],
      'nonpayable'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'appId'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'rate'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'rewardsPool'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'setAppId'): TypedContractMethod<
      [newAppId: BytesLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'setRate'): TypedContractMethod<
      [newRate: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'setRewardsPool'): TypedContractMethod<
      [newRewardsPool: AddressLike, ],
      [void],
      'nonpayable'
    >;

    getEvent(key: 'AppIdChanged'): TypedContractEvent<AppIdChangedEvent.InputTuple, AppIdChangedEvent.OutputTuple, AppIdChangedEvent.OutputObject>;
getEvent(key: 'RateChanged'): TypedContractEvent<RateChangedEvent.InputTuple, RateChangedEvent.OutputTuple, RateChangedEvent.OutputObject>;
getEvent(key: 'RewardsPoolChanged'): TypedContractEvent<RewardsPoolChangedEvent.InputTuple, RewardsPoolChangedEvent.OutputTuple, RewardsPoolChangedEvent.OutputObject>;

    filters: {
      
      'AppIdChanged(bytes32)': TypedContractEvent<AppIdChangedEvent.InputTuple, AppIdChangedEvent.OutputTuple, AppIdChangedEvent.OutputObject>;
      AppIdChanged: TypedContractEvent<AppIdChangedEvent.InputTuple, AppIdChangedEvent.OutputTuple, AppIdChangedEvent.OutputObject>;
    

      'RateChanged(uint256)': TypedContractEvent<RateChangedEvent.InputTuple, RateChangedEvent.OutputTuple, RateChangedEvent.OutputObject>;
      RateChanged: TypedContractEvent<RateChangedEvent.InputTuple, RateChangedEvent.OutputTuple, RateChangedEvent.OutputObject>;
    

      'RewardsPoolChanged(address)': TypedContractEvent<RewardsPoolChangedEvent.InputTuple, RewardsPoolChangedEvent.OutputTuple, RewardsPoolChangedEvent.OutputObject>;
      RewardsPoolChanged: TypedContractEvent<RewardsPoolChangedEvent.InputTuple, RewardsPoolChangedEvent.OutputTuple, RewardsPoolChangedEvent.OutputObject>;
    
    };
  }