/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { Addressable } from "ethers";
import { Contract, ContractFactory, ContractTransactionResponse, Interface } from "ethers"
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers"
import type { NonPayableOverrides } from "../../common.js"
  import type { Oracle, OracleInterface } from "../../Oracle.sol/Oracle.js";

  const _abi = [
  {
    "inputs": [],
    "stateMutability": "nonpayable",
    "type": "constructor"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "owner",
        "type": "address"
      }
    ],
    "name": "OwnableInvalidOwner",
    "type": "error"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "account",
        "type": "address"
      }
    ],
    "name": "OwnableUnauthorizedAccount",
    "type": "error"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": true,
        "internalType": "address",
        "name": "previousOwner",
        "type": "address"
      },
      {
        "indexed": true,
        "internalType": "address",
        "name": "newOwner",
        "type": "address"
      }
    ],
    "name": "OwnershipTransferred",
    "type": "event"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": true,
        "internalType": "address",
        "name": "fiat",
        "type": "address"
      },
      {
        "indexed": false,
        "internalType": "uint256",
        "name": "newPrice",
        "type": "uint256"
      },
      {
        "indexed": false,
        "internalType": "uint256",
        "name": "timestamp",
        "type": "uint256"
      }
    ],
    "name": "PriceUpdated",
    "type": "event"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "",
        "type": "address"
      }
    ],
    "name": "fiatPerVet",
    "outputs": [
      {
        "internalType": "uint256",
        "name": "",
        "type": "uint256"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "owner",
    "outputs": [
      {
        "internalType": "address",
        "name": "",
        "type": "address"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "renounceOwnership",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "fiat",
        "type": "address"
      },
      {
        "internalType": "uint256",
        "name": "vet",
        "type": "uint256"
      }
    ],
    "name": "setfiatPerVet",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "newOwner",
        "type": "address"
      }
    ],
    "name": "transferOwnership",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  }
] as const;

  const _bytecode = "0x6080604052348015600f57600080fd5b503380603557604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b603c816041565b506091565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6102b6806100a06000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063715018a61461005c57806376130067146100665780637853f13f146100795780638da5cb5b146100ac578063f2fde38b146100c7575b600080fd5b6100646100da565b005b610064610074366004610234565b6100ee565b61009961008736600461025e565b60016020526000908152604090205481565b6040519081526020015b60405180910390f35b6000546040516001600160a01b0390911681526020016100a3565b6100646100d536600461025e565b610158565b6100e261019b565b6100ec60006101c8565b565b6100f661019b565b6001600160a01b03821660008181526001602052604090819020839055517fb556fac599c3c70efb9ab1fa725ecace6c81cc48d1455f886607def065f3e0c09061014c9084904290918252602082015260400190565b60405180910390a25050565b61016061019b565b6001600160a01b03811661018f57604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b610198816101c8565b50565b6000546001600160a01b031633146100ec5760405163118cdaa760e01b8152336004820152602401610186565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b038116811461022f57600080fd5b919050565b6000806040838503121561024757600080fd5b61025083610218565b946020939093013593505050565b60006020828403121561027057600080fd5b61027982610218565b939250505056fea26469706673582212200d621d94d0be820cfa9fb8068b6f4a29374e6e46a67b4a58fd32916d6232329364736f6c634300081c0033";

  
      type OracleConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

      const isSuperArgs = (xs: OracleConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
        xs.length > 1
    

  export class Oracle__factory extends ContractFactory {
    
      constructor(...args: OracleConstructorParams) {
        if (isSuperArgs(args)) {
          super(...args);
        } else {
          super(_abi, _bytecode, args[0]);
        }
        
      }
    
    override getDeployTransaction(overrides?: NonPayableOverrides & { from?: string }): Promise<ContractDeployTransaction> {
      return super.getDeployTransaction(overrides || {});
    };
    override deploy(overrides?: NonPayableOverrides & { from?: string }) {
      return super.deploy(overrides || {}) as Promise<Oracle & {
        deploymentTransaction(): ContractTransactionResponse;
      }>;
    }
    override connect(runner: ContractRunner | null): Oracle__factory {
      return super.connect(runner) as Oracle__factory;
    }
    
    
    static readonly bytecode = _bytecode;
    static readonly abi = _abi;
    static createInterface(): OracleInterface {
      return new Interface(_abi) as OracleInterface;
    }
    
    override attach(address: string | Addressable): Oracle {
      return super.attach(address) as Oracle;
    }
  static connect(address: string, runner?: ContractRunner | null): Oracle {
      return new Contract(address, _abi, runner) as unknown as Oracle;
    }
  }

  
  