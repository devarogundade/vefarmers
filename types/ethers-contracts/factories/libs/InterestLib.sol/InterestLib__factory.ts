/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { Addressable } from "ethers";
import { Contract, ContractFactory, ContractTransactionResponse, Interface } from "ethers"
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers"
import type { NonPayableOverrides } from "../../../common.js"
  import type { InterestLib, InterestLibInterface } from "../../../libs/InterestLib.sol/InterestLib.js";

  const _abi = [
  {
    "inputs": [],
    "name": "InterestOverflow",
    "type": "error"
  },
  {
    "inputs": [],
    "name": "InvalidDuration",
    "type": "error"
  }
] as const;

  const _bytecode = "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220adf1466235938b2dd2f87a1efc40503dd24ddfc9caccbd77df4bf99d8946d85664736f6c634300081c0033";

  
      type InterestLibConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

      const isSuperArgs = (xs: InterestLibConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
        xs.length > 1
    

  export class InterestLib__factory extends ContractFactory {
    
      constructor(...args: InterestLibConstructorParams) {
        if (isSuperArgs(args)) {
          super(...args);
        } else {
          super(_abi, _bytecode, args[0]);
        }
        
      }
    
    override getDeployTransaction(overrides?: NonPayableOverrides & { from?: string }): Promise<ContractDeployTransaction> {
      return super.getDeployTransaction(overrides || {});
    };
    override deploy(overrides?: NonPayableOverrides & { from?: string }) {
      return super.deploy(overrides || {}) as Promise<InterestLib & {
        deploymentTransaction(): ContractTransactionResponse;
      }>;
    }
    override connect(runner: ContractRunner | null): InterestLib__factory {
      return super.connect(runner) as InterestLib__factory;
    }
    
    
    static readonly bytecode = _bytecode;
    static readonly abi = _abi;
    static createInterface(): InterestLibInterface {
      return new Interface(_abi) as InterestLibInterface;
    }
    
    override attach(address: string | Addressable): InterestLib {
      return super.attach(address) as InterestLib;
    }
  static connect(address: string, runner?: ContractRunner | null): InterestLib {
      return new Contract(address, _abi, runner) as unknown as InterestLib;
    }
  }

  
  