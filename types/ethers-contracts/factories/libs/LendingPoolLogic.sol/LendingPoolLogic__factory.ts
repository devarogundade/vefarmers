/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { Addressable } from "ethers";
import { Contract, ContractFactory, ContractTransactionResponse, Interface } from "ethers"
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers"
import type { NonPayableOverrides } from "../../../common.js"
  import type { LendingPoolLogic, LendingPoolLogicInterface } from "../../../libs/LendingPoolLogic.sol/LendingPoolLogic.js";

  const _abi = [
  {
    "inputs": [],
    "name": "ExceedsBorrowCapacity",
    "type": "error"
  },
  {
    "inputs": [],
    "name": "InDebt",
    "type": "error"
  },
  {
    "inputs": [],
    "name": "InsufficientLPBalance",
    "type": "error"
  },
  {
    "inputs": [],
    "name": "InsufficientLiquidity",
    "type": "error"
  },
  {
    "inputs": [],
    "name": "InvalidPledgeManager",
    "type": "error"
  },
  {
    "inputs": [],
    "name": "InvalidSignature",
    "type": "error"
  },
  {
    "inputs": [],
    "name": "LTVBelowThreshold",
    "type": "error"
  },
  {
    "inputs": [],
    "name": "NoBorrowCapacity",
    "type": "error"
  },
  {
    "inputs": [],
    "name": "NoDebt",
    "type": "error"
  },
  {
    "inputs": [],
    "name": "NoLPSupply",
    "type": "error"
  },
  {
    "inputs": [],
    "name": "NoOutstandingLoan",
    "type": "error"
  },
  {
    "inputs": [],
    "name": "OracleZero",
    "type": "error"
  },
  {
    "inputs": [],
    "name": "OverflowAfterPay",
    "type": "error"
  },
  {
    "inputs": [],
    "name": "OverflowNewPrincipal",
    "type": "error"
  },
  {
    "inputs": [],
    "name": "PrincipalOverflow",
    "type": "error"
  },
  {
    "inputs": [],
    "name": "SignatureExpired",
    "type": "error"
  },
  {
    "inputs": [],
    "name": "UnpledgedPool",
    "type": "error"
  },
  {
    "inputs": [],
    "name": "ZeroAccount",
    "type": "error"
  },
  {
    "inputs": [],
    "name": "ZeroAddress",
    "type": "error"
  },
  {
    "inputs": [],
    "name": "ZeroAmount",
    "type": "error"
  }
] as const;

  const _bytecode = "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122052f7a08e3ff79a9fda1bc07b6f03208ac3d88032518d32a2e172b287d85070a064736f6c634300081c0033";

  
      type LendingPoolLogicConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

      const isSuperArgs = (xs: LendingPoolLogicConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
        xs.length > 1
    

  export class LendingPoolLogic__factory extends ContractFactory {
    
      constructor(...args: LendingPoolLogicConstructorParams) {
        if (isSuperArgs(args)) {
          super(...args);
        } else {
          super(_abi, _bytecode, args[0]);
        }
        
      }
    
    override getDeployTransaction(overrides?: NonPayableOverrides & { from?: string }): Promise<ContractDeployTransaction> {
      return super.getDeployTransaction(overrides || {});
    };
    override deploy(overrides?: NonPayableOverrides & { from?: string }) {
      return super.deploy(overrides || {}) as Promise<LendingPoolLogic & {
        deploymentTransaction(): ContractTransactionResponse;
      }>;
    }
    override connect(runner: ContractRunner | null): LendingPoolLogic__factory {
      return super.connect(runner) as LendingPoolLogic__factory;
    }
    
    
    static readonly bytecode = _bytecode;
    static readonly abi = _abi;
    static createInterface(): LendingPoolLogicInterface {
      return new Interface(_abi) as LendingPoolLogicInterface;
    }
    
    override attach(address: string | Addressable): LendingPoolLogic {
      return super.attach(address) as LendingPoolLogic;
    }
  static connect(address: string, runner?: ContractRunner | null): LendingPoolLogic {
      return new Contract(address, _abi, runner) as unknown as LendingPoolLogic;
    }
  }

  
  