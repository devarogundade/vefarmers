/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../../common.js"
  

  export interface LendingPoolInterfaceInterface extends Interface {
    getFunction(nameOrSignature: "activatePledge" | "borrow" | "borrowWithPermit" | "borrowable" | "deactivatePledge" | "liquidate" | "ltvBps" | "outstanding" | "repay" | "supply" | "withdraw" | "withdrawable"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "Borrowed" | "Repaid" | "Supplied" | "Withdrawn"): EventFragment;

    encodeFunctionData(functionFragment: 'activatePledge', values?: undefined): string;
encodeFunctionData(functionFragment: 'borrow', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'borrowWithPermit', values: [BigNumberish, AddressLike, BigNumberish, BigNumberish, BytesLike, BytesLike]): string;
encodeFunctionData(functionFragment: 'borrowable', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'deactivatePledge', values?: undefined): string;
encodeFunctionData(functionFragment: 'liquidate', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'ltvBps', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'outstanding', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'repay', values: [BigNumberish, AddressLike]): string;
encodeFunctionData(functionFragment: 'supply', values: [BigNumberish, AddressLike]): string;
encodeFunctionData(functionFragment: 'withdraw', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'withdrawable', values: [AddressLike]): string;

    decodeFunctionResult(functionFragment: 'activatePledge', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'borrow', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'borrowWithPermit', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'borrowable', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'deactivatePledge', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'liquidate', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'ltvBps', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'outstanding', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'repay', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'supply', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'withdrawable', data: BytesLike): Result;
  }

  
    export namespace BorrowedEvent {
      export type InputTuple = [farmer: AddressLike, amount: BigNumberish, newPrincipal: BigNumberish];
      export type OutputTuple = [farmer: string, amount: bigint, newPrincipal: bigint];
      export interface OutputObject {farmer: string, amount: bigint, newPrincipal: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RepaidEvent {
      export type InputTuple = [farmer: AddressLike, amount: BigNumberish, remainingPrincipal: BigNumberish, interestPaid: BigNumberish];
      export type OutputTuple = [farmer: string, amount: bigint, remainingPrincipal: bigint, interestPaid: bigint];
      export interface OutputObject {farmer: string, amount: bigint, remainingPrincipal: bigint, interestPaid: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace SuppliedEvent {
      export type InputTuple = [lp: AddressLike, amount: BigNumberish, lpMinted: BigNumberish];
      export type OutputTuple = [lp: string, amount: bigint, lpMinted: bigint];
      export interface OutputObject {lp: string, amount: bigint, lpMinted: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace WithdrawnEvent {
      export type InputTuple = [lp: AddressLike, amount: BigNumberish, lpBurned: BigNumberish];
      export type OutputTuple = [lp: string, amount: bigint, lpBurned: bigint];
      export interface OutputObject {lp: string, amount: bigint, lpBurned: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface LendingPoolInterface extends BaseContract {
    
    connect(runner?: ContractRunner | null): LendingPoolInterface;
    waitForDeployment(): Promise<this>;

    interface: LendingPoolInterfaceInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    activatePledge: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    borrow: TypedContractMethod<
      [amount: BigNumberish, ],
      [boolean],
      'nonpayable'
    >
    

    
    borrowWithPermit: TypedContractMethod<
      [amount: BigNumberish, farmer: AddressLike, deadline: BigNumberish, v: BigNumberish, r: BytesLike, s: BytesLike, ],
      [boolean],
      'nonpayable'
    >
    

    
    borrowable: TypedContractMethod<
      [farmer: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    deactivatePledge: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    liquidate: TypedContractMethod<
      [farmer: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    ltvBps: TypedContractMethod<
      [farmer: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    outstanding: TypedContractMethod<
      [farmer: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    repay: TypedContractMethod<
      [amount: BigNumberish, behalfOf: AddressLike, ],
      [bigint],
      'nonpayable'
    >
    

    
    supply: TypedContractMethod<
      [amount: BigNumberish, behalfOf: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    withdraw: TypedContractMethod<
      [amount: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    withdrawable: TypedContractMethod<
      [account: AddressLike, ],
      [bigint],
      'view'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'activatePledge'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'borrow'): TypedContractMethod<
      [amount: BigNumberish, ],
      [boolean],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'borrowWithPermit'): TypedContractMethod<
      [amount: BigNumberish, farmer: AddressLike, deadline: BigNumberish, v: BigNumberish, r: BytesLike, s: BytesLike, ],
      [boolean],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'borrowable'): TypedContractMethod<
      [farmer: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'deactivatePledge'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'liquidate'): TypedContractMethod<
      [farmer: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'ltvBps'): TypedContractMethod<
      [farmer: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'outstanding'): TypedContractMethod<
      [farmer: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'repay'): TypedContractMethod<
      [amount: BigNumberish, behalfOf: AddressLike, ],
      [bigint],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'supply'): TypedContractMethod<
      [amount: BigNumberish, behalfOf: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'withdraw'): TypedContractMethod<
      [amount: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'withdrawable'): TypedContractMethod<
      [account: AddressLike, ],
      [bigint],
      'view'
    >;

    getEvent(key: 'Borrowed'): TypedContractEvent<BorrowedEvent.InputTuple, BorrowedEvent.OutputTuple, BorrowedEvent.OutputObject>;
getEvent(key: 'Repaid'): TypedContractEvent<RepaidEvent.InputTuple, RepaidEvent.OutputTuple, RepaidEvent.OutputObject>;
getEvent(key: 'Supplied'): TypedContractEvent<SuppliedEvent.InputTuple, SuppliedEvent.OutputTuple, SuppliedEvent.OutputObject>;
getEvent(key: 'Withdrawn'): TypedContractEvent<WithdrawnEvent.InputTuple, WithdrawnEvent.OutputTuple, WithdrawnEvent.OutputObject>;

    filters: {
      
      'Borrowed(address,uint256,uint256)': TypedContractEvent<BorrowedEvent.InputTuple, BorrowedEvent.OutputTuple, BorrowedEvent.OutputObject>;
      Borrowed: TypedContractEvent<BorrowedEvent.InputTuple, BorrowedEvent.OutputTuple, BorrowedEvent.OutputObject>;
    

      'Repaid(address,uint256,uint256,uint256)': TypedContractEvent<RepaidEvent.InputTuple, RepaidEvent.OutputTuple, RepaidEvent.OutputObject>;
      Repaid: TypedContractEvent<RepaidEvent.InputTuple, RepaidEvent.OutputTuple, RepaidEvent.OutputObject>;
    

      'Supplied(address,uint256,uint256)': TypedContractEvent<SuppliedEvent.InputTuple, SuppliedEvent.OutputTuple, SuppliedEvent.OutputObject>;
      Supplied: TypedContractEvent<SuppliedEvent.InputTuple, SuppliedEvent.OutputTuple, SuppliedEvent.OutputObject>;
    

      'Withdrawn(address,uint256,uint256)': TypedContractEvent<WithdrawnEvent.InputTuple, WithdrawnEvent.OutputTuple, WithdrawnEvent.OutputObject>;
      Withdrawn: TypedContractEvent<WithdrawnEvent.InputTuple, WithdrawnEvent.OutputTuple, WithdrawnEvent.OutputObject>;
    
    };
  }