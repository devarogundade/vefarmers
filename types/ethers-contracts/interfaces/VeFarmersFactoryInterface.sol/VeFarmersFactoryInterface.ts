/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../../common.js"
  

  export interface VeFarmersFactoryInterfaceInterface extends Interface {
    getFunction(nameOrSignature: "createPool"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "ControllerUpdated" | "OracleUpdated" | "PoolCreated" | "RegistryUpdated"): EventFragment;

    encodeFunctionData(functionFragment: 'createPool', values: [AddressLike]): string;

    decodeFunctionResult(functionFragment: 'createPool', data: BytesLike): Result;
  }

  
    export namespace ControllerUpdatedEvent {
      export type InputTuple = [newController: AddressLike];
      export type OutputTuple = [newController: string];
      export interface OutputObject {newController: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace OracleUpdatedEvent {
      export type InputTuple = [newOracle: AddressLike];
      export type OutputTuple = [newOracle: string];
      export interface OutputObject {newOracle: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace PoolCreatedEvent {
      export type InputTuple = [fiat: AddressLike, pool: AddressLike, poolIndex: BigNumberish];
      export type OutputTuple = [fiat: string, pool: string, poolIndex: bigint];
      export interface OutputObject {fiat: string, pool: string, poolIndex: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RegistryUpdatedEvent {
      export type InputTuple = [newRegistry: AddressLike];
      export type OutputTuple = [newRegistry: string];
      export interface OutputObject {newRegistry: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface VeFarmersFactoryInterface extends BaseContract {
    
    connect(runner?: ContractRunner | null): VeFarmersFactoryInterface;
    waitForDeployment(): Promise<this>;

    interface: VeFarmersFactoryInterfaceInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    createPool: TypedContractMethod<
      [fiat: AddressLike, ],
      [string],
      'nonpayable'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'createPool'): TypedContractMethod<
      [fiat: AddressLike, ],
      [string],
      'nonpayable'
    >;

    getEvent(key: 'ControllerUpdated'): TypedContractEvent<ControllerUpdatedEvent.InputTuple, ControllerUpdatedEvent.OutputTuple, ControllerUpdatedEvent.OutputObject>;
getEvent(key: 'OracleUpdated'): TypedContractEvent<OracleUpdatedEvent.InputTuple, OracleUpdatedEvent.OutputTuple, OracleUpdatedEvent.OutputObject>;
getEvent(key: 'PoolCreated'): TypedContractEvent<PoolCreatedEvent.InputTuple, PoolCreatedEvent.OutputTuple, PoolCreatedEvent.OutputObject>;
getEvent(key: 'RegistryUpdated'): TypedContractEvent<RegistryUpdatedEvent.InputTuple, RegistryUpdatedEvent.OutputTuple, RegistryUpdatedEvent.OutputObject>;

    filters: {
      
      'ControllerUpdated(address)': TypedContractEvent<ControllerUpdatedEvent.InputTuple, ControllerUpdatedEvent.OutputTuple, ControllerUpdatedEvent.OutputObject>;
      ControllerUpdated: TypedContractEvent<ControllerUpdatedEvent.InputTuple, ControllerUpdatedEvent.OutputTuple, ControllerUpdatedEvent.OutputObject>;
    

      'OracleUpdated(address)': TypedContractEvent<OracleUpdatedEvent.InputTuple, OracleUpdatedEvent.OutputTuple, OracleUpdatedEvent.OutputObject>;
      OracleUpdated: TypedContractEvent<OracleUpdatedEvent.InputTuple, OracleUpdatedEvent.OutputTuple, OracleUpdatedEvent.OutputObject>;
    

      'PoolCreated(address,address,uint256)': TypedContractEvent<PoolCreatedEvent.InputTuple, PoolCreatedEvent.OutputTuple, PoolCreatedEvent.OutputObject>;
      PoolCreated: TypedContractEvent<PoolCreatedEvent.InputTuple, PoolCreatedEvent.OutputTuple, PoolCreatedEvent.OutputObject>;
    

      'RegistryUpdated(address)': TypedContractEvent<RegistryUpdatedEvent.InputTuple, RegistryUpdatedEvent.OutputTuple, RegistryUpdatedEvent.OutputObject>;
      RegistryUpdated: TypedContractEvent<RegistryUpdatedEvent.InputTuple, RegistryUpdatedEvent.OutputTuple, RegistryUpdatedEvent.OutputObject>;
    
    };
  }