/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../../common.js"
  

  export interface FarmerRegistryInterfaceInterface extends Interface {
    getFunction(nameOrSignature: "getAllManagers" | "getManager" | "getProfileUri"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "FarmerRegistered" | "FarmerUpdated"): EventFragment;

    encodeFunctionData(functionFragment: 'getAllManagers', values?: undefined): string;
encodeFunctionData(functionFragment: 'getManager', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'getProfileUri', values: [AddressLike]): string;

    decodeFunctionResult(functionFragment: 'getAllManagers', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getManager', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getProfileUri', data: BytesLike): Result;
  }

  
    export namespace FarmerRegisteredEvent {
      export type InputTuple = [farmer: AddressLike, pool: AddressLike, profileUri: string, manager: AddressLike];
      export type OutputTuple = [farmer: string, pool: string, profileUri: string, manager: string];
      export interface OutputObject {farmer: string, pool: string, profileUri: string, manager: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace FarmerUpdatedEvent {
      export type InputTuple = [farmer: AddressLike, profileUri: string];
      export type OutputTuple = [farmer: string, profileUri: string];
      export interface OutputObject {farmer: string, profileUri: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface FarmerRegistryInterface extends BaseContract {
    
    connect(runner?: ContractRunner | null): FarmerRegistryInterface;
    waitForDeployment(): Promise<this>;

    interface: FarmerRegistryInterfaceInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    getAllManagers: TypedContractMethod<
      [],
      [string[]],
      'view'
    >
    

    
    getManager: TypedContractMethod<
      [farmer: AddressLike, ],
      [string],
      'view'
    >
    

    
    getProfileUri: TypedContractMethod<
      [farmer: AddressLike, ],
      [string],
      'view'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'getAllManagers'): TypedContractMethod<
      [],
      [string[]],
      'view'
    >;
getFunction(nameOrSignature: 'getManager'): TypedContractMethod<
      [farmer: AddressLike, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'getProfileUri'): TypedContractMethod<
      [farmer: AddressLike, ],
      [string],
      'view'
    >;

    getEvent(key: 'FarmerRegistered'): TypedContractEvent<FarmerRegisteredEvent.InputTuple, FarmerRegisteredEvent.OutputTuple, FarmerRegisteredEvent.OutputObject>;
getEvent(key: 'FarmerUpdated'): TypedContractEvent<FarmerUpdatedEvent.InputTuple, FarmerUpdatedEvent.OutputTuple, FarmerUpdatedEvent.OutputObject>;

    filters: {
      
      'FarmerRegistered(address,address,string,address)': TypedContractEvent<FarmerRegisteredEvent.InputTuple, FarmerRegisteredEvent.OutputTuple, FarmerRegisteredEvent.OutputObject>;
      FarmerRegistered: TypedContractEvent<FarmerRegisteredEvent.InputTuple, FarmerRegisteredEvent.OutputTuple, FarmerRegisteredEvent.OutputObject>;
    

      'FarmerUpdated(address,string)': TypedContractEvent<FarmerUpdatedEvent.InputTuple, FarmerUpdatedEvent.OutputTuple, FarmerUpdatedEvent.OutputObject>;
      FarmerUpdated: TypedContractEvent<FarmerUpdatedEvent.InputTuple, FarmerUpdatedEvent.OutputTuple, FarmerUpdatedEvent.OutputObject>;
    
    };
  }