/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../../common.js"
  

  export interface PledgeManagerInterfaceInterface extends Interface {
    getFunction(nameOrSignature: "active" | "allowance" | "approve" | "balanceOf" | "farmer" | "harvest" | "harvestable" | "liquidate" | "pledge" | "pool" | "setActive" | "totalSupply" | "transfer" | "transferFrom" | "withdraw"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "ActiveStatusChanged" | "Approval" | "Liquidated" | "Pledged" | "RewardHarvested" | "Transfer" | "Withdrawn"): EventFragment;

    encodeFunctionData(functionFragment: 'active', values?: undefined): string;
encodeFunctionData(functionFragment: 'allowance', values: [AddressLike, AddressLike]): string;
encodeFunctionData(functionFragment: 'approve', values: [AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'balanceOf', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'farmer', values?: undefined): string;
encodeFunctionData(functionFragment: 'harvest', values?: undefined): string;
encodeFunctionData(functionFragment: 'harvestable', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'liquidate', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'pledge', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'pool', values?: undefined): string;
encodeFunctionData(functionFragment: 'setActive', values: [boolean]): string;
encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
encodeFunctionData(functionFragment: 'transfer', values: [AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'transferFrom', values: [AddressLike, AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'withdraw', values: [BigNumberish]): string;

    decodeFunctionResult(functionFragment: 'active', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'farmer', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'harvest', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'harvestable', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'liquidate', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'pledge', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'pool', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setActive', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
  }

  
    export namespace ActiveStatusChangedEvent {
      export type InputTuple = [active: boolean];
      export type OutputTuple = [active: boolean];
      export interface OutputObject {active: boolean };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace ApprovalEvent {
      export type InputTuple = [owner: AddressLike, spender: AddressLike, value: BigNumberish];
      export type OutputTuple = [owner: string, spender: string, value: bigint];
      export interface OutputObject {owner: string, spender: string, value: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace LiquidatedEvent {
      export type InputTuple = [farmer: AddressLike, liquidator: AddressLike, amount: BigNumberish];
      export type OutputTuple = [farmer: string, liquidator: string, amount: bigint];
      export interface OutputObject {farmer: string, liquidator: string, amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace PledgedEvent {
      export type InputTuple = [pledger: AddressLike, amount: BigNumberish];
      export type OutputTuple = [pledger: string, amount: bigint];
      export interface OutputObject {pledger: string, amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RewardHarvestedEvent {
      export type InputTuple = [account: AddressLike, amount: BigNumberish];
      export type OutputTuple = [account: string, amount: bigint];
      export interface OutputObject {account: string, amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace TransferEvent {
      export type InputTuple = [from: AddressLike, to: AddressLike, value: BigNumberish];
      export type OutputTuple = [from: string, to: string, value: bigint];
      export interface OutputObject {from: string, to: string, value: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace WithdrawnEvent {
      export type InputTuple = [withdrawer: AddressLike, amount: BigNumberish, rewards: BigNumberish];
      export type OutputTuple = [withdrawer: string, amount: bigint, rewards: bigint];
      export interface OutputObject {withdrawer: string, amount: bigint, rewards: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface PledgeManagerInterface extends BaseContract {
    
    connect(runner?: ContractRunner | null): PledgeManagerInterface;
    waitForDeployment(): Promise<this>;

    interface: PledgeManagerInterfaceInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    active: TypedContractMethod<
      [],
      [boolean],
      'view'
    >
    

    
    allowance: TypedContractMethod<
      [owner: AddressLike, spender: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    approve: TypedContractMethod<
      [spender: AddressLike, value: BigNumberish, ],
      [boolean],
      'nonpayable'
    >
    

    
    balanceOf: TypedContractMethod<
      [account: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    farmer: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    harvest: TypedContractMethod<
      [],
      [bigint],
      'nonpayable'
    >
    

    
    harvestable: TypedContractMethod<
      [account: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    liquidate: TypedContractMethod<
      [liquidator: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    pledge: TypedContractMethod<
      [behalfOf: AddressLike, ],
      [void],
      'payable'
    >
    

    
    pool: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    setActive: TypedContractMethod<
      [enabled: boolean, ],
      [void],
      'nonpayable'
    >
    

    
    totalSupply: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    transfer: TypedContractMethod<
      [to: AddressLike, value: BigNumberish, ],
      [boolean],
      'nonpayable'
    >
    

    
    transferFrom: TypedContractMethod<
      [from: AddressLike, to: AddressLike, value: BigNumberish, ],
      [boolean],
      'nonpayable'
    >
    

    
    withdraw: TypedContractMethod<
      [amount: BigNumberish, ],
      [bigint],
      'nonpayable'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'active'): TypedContractMethod<
      [],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'allowance'): TypedContractMethod<
      [owner: AddressLike, spender: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'approve'): TypedContractMethod<
      [spender: AddressLike, value: BigNumberish, ],
      [boolean],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'balanceOf'): TypedContractMethod<
      [account: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'farmer'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'harvest'): TypedContractMethod<
      [],
      [bigint],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'harvestable'): TypedContractMethod<
      [account: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'liquidate'): TypedContractMethod<
      [liquidator: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'pledge'): TypedContractMethod<
      [behalfOf: AddressLike, ],
      [void],
      'payable'
    >;
getFunction(nameOrSignature: 'pool'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'setActive'): TypedContractMethod<
      [enabled: boolean, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'totalSupply'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'transfer'): TypedContractMethod<
      [to: AddressLike, value: BigNumberish, ],
      [boolean],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'transferFrom'): TypedContractMethod<
      [from: AddressLike, to: AddressLike, value: BigNumberish, ],
      [boolean],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'withdraw'): TypedContractMethod<
      [amount: BigNumberish, ],
      [bigint],
      'nonpayable'
    >;

    getEvent(key: 'ActiveStatusChanged'): TypedContractEvent<ActiveStatusChangedEvent.InputTuple, ActiveStatusChangedEvent.OutputTuple, ActiveStatusChangedEvent.OutputObject>;
getEvent(key: 'Approval'): TypedContractEvent<ApprovalEvent.InputTuple, ApprovalEvent.OutputTuple, ApprovalEvent.OutputObject>;
getEvent(key: 'Liquidated'): TypedContractEvent<LiquidatedEvent.InputTuple, LiquidatedEvent.OutputTuple, LiquidatedEvent.OutputObject>;
getEvent(key: 'Pledged'): TypedContractEvent<PledgedEvent.InputTuple, PledgedEvent.OutputTuple, PledgedEvent.OutputObject>;
getEvent(key: 'RewardHarvested'): TypedContractEvent<RewardHarvestedEvent.InputTuple, RewardHarvestedEvent.OutputTuple, RewardHarvestedEvent.OutputObject>;
getEvent(key: 'Transfer'): TypedContractEvent<TransferEvent.InputTuple, TransferEvent.OutputTuple, TransferEvent.OutputObject>;
getEvent(key: 'Withdrawn'): TypedContractEvent<WithdrawnEvent.InputTuple, WithdrawnEvent.OutputTuple, WithdrawnEvent.OutputObject>;

    filters: {
      
      'ActiveStatusChanged(bool)': TypedContractEvent<ActiveStatusChangedEvent.InputTuple, ActiveStatusChangedEvent.OutputTuple, ActiveStatusChangedEvent.OutputObject>;
      ActiveStatusChanged: TypedContractEvent<ActiveStatusChangedEvent.InputTuple, ActiveStatusChangedEvent.OutputTuple, ActiveStatusChangedEvent.OutputObject>;
    

      'Approval(address,address,uint256)': TypedContractEvent<ApprovalEvent.InputTuple, ApprovalEvent.OutputTuple, ApprovalEvent.OutputObject>;
      Approval: TypedContractEvent<ApprovalEvent.InputTuple, ApprovalEvent.OutputTuple, ApprovalEvent.OutputObject>;
    

      'Liquidated(address,address,uint256)': TypedContractEvent<LiquidatedEvent.InputTuple, LiquidatedEvent.OutputTuple, LiquidatedEvent.OutputObject>;
      Liquidated: TypedContractEvent<LiquidatedEvent.InputTuple, LiquidatedEvent.OutputTuple, LiquidatedEvent.OutputObject>;
    

      'Pledged(address,uint256)': TypedContractEvent<PledgedEvent.InputTuple, PledgedEvent.OutputTuple, PledgedEvent.OutputObject>;
      Pledged: TypedContractEvent<PledgedEvent.InputTuple, PledgedEvent.OutputTuple, PledgedEvent.OutputObject>;
    

      'RewardHarvested(address,uint256)': TypedContractEvent<RewardHarvestedEvent.InputTuple, RewardHarvestedEvent.OutputTuple, RewardHarvestedEvent.OutputObject>;
      RewardHarvested: TypedContractEvent<RewardHarvestedEvent.InputTuple, RewardHarvestedEvent.OutputTuple, RewardHarvestedEvent.OutputObject>;
    

      'Transfer(address,address,uint256)': TypedContractEvent<TransferEvent.InputTuple, TransferEvent.OutputTuple, TransferEvent.OutputObject>;
      Transfer: TypedContractEvent<TransferEvent.InputTuple, TransferEvent.OutputTuple, TransferEvent.OutputObject>;
    

      'Withdrawn(address,uint256,uint256)': TypedContractEvent<WithdrawnEvent.InputTuple, WithdrawnEvent.OutputTuple, WithdrawnEvent.OutputObject>;
      Withdrawn: TypedContractEvent<WithdrawnEvent.InputTuple, WithdrawnEvent.OutputTuple, WithdrawnEvent.OutputObject>;
    
    };
  }