/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../common.js"
  

  export interface LendingPoolInterface extends Interface {
    getFunction(nameOrSignature: "DOMAIN_SEPARATOR" | "LIQUIDATION_BPS" | "MAX_BPS" | "activatePledge" | "allowance" | "approve" | "balanceOf" | "borrow" | "borrowRateBp" | "borrowWithPermit" | "borrowable" | "deactivatePledge" | "decimals" | "farmerPositions" | "fiat" | "liquidate" | "loanToValueBp" | "ltvBps" | "name" | "nonces" | "oracle" | "outstanding" | "owner" | "registry" | "renounceOwnership" | "repay" | "setBorrowRateBp" | "setLoanToValueBp" | "setOracle" | "supply" | "symbol" | "totalBorrowed" | "totalSupplied" | "totalSupply" | "transfer" | "transferFrom" | "transferOwnership" | "withdraw" | "withdrawable"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "Approval" | "Borrowed" | "OwnershipTransferred" | "Repaid" | "Supplied" | "Transfer" | "Withdrawn"): EventFragment;

    encodeFunctionData(functionFragment: 'DOMAIN_SEPARATOR', values?: undefined): string;
encodeFunctionData(functionFragment: 'LIQUIDATION_BPS', values?: undefined): string;
encodeFunctionData(functionFragment: 'MAX_BPS', values?: undefined): string;
encodeFunctionData(functionFragment: 'activatePledge', values?: undefined): string;
encodeFunctionData(functionFragment: 'allowance', values: [AddressLike, AddressLike]): string;
encodeFunctionData(functionFragment: 'approve', values: [AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'balanceOf', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'borrow', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'borrowRateBp', values?: undefined): string;
encodeFunctionData(functionFragment: 'borrowWithPermit', values: [BigNumberish, AddressLike, BigNumberish, BigNumberish, BytesLike, BytesLike]): string;
encodeFunctionData(functionFragment: 'borrowable', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'deactivatePledge', values?: undefined): string;
encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
encodeFunctionData(functionFragment: 'farmerPositions', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'fiat', values?: undefined): string;
encodeFunctionData(functionFragment: 'liquidate', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'loanToValueBp', values?: undefined): string;
encodeFunctionData(functionFragment: 'ltvBps', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'name', values?: undefined): string;
encodeFunctionData(functionFragment: 'nonces', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'oracle', values?: undefined): string;
encodeFunctionData(functionFragment: 'outstanding', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
encodeFunctionData(functionFragment: 'registry', values?: undefined): string;
encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
encodeFunctionData(functionFragment: 'repay', values: [BigNumberish, AddressLike]): string;
encodeFunctionData(functionFragment: 'setBorrowRateBp', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'setLoanToValueBp', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'setOracle', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'supply', values: [BigNumberish, AddressLike]): string;
encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
encodeFunctionData(functionFragment: 'totalBorrowed', values?: undefined): string;
encodeFunctionData(functionFragment: 'totalSupplied', values?: undefined): string;
encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
encodeFunctionData(functionFragment: 'transfer', values: [AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'transferFrom', values: [AddressLike, AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'transferOwnership', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'withdraw', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'withdrawable', values: [AddressLike]): string;

    decodeFunctionResult(functionFragment: 'DOMAIN_SEPARATOR', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'LIQUIDATION_BPS', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'MAX_BPS', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'activatePledge', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'borrow', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'borrowRateBp', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'borrowWithPermit', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'borrowable', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'deactivatePledge', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'farmerPositions', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'fiat', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'liquidate', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'loanToValueBp', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'ltvBps', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'nonces', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'oracle', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'outstanding', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'registry', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'repay', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setBorrowRateBp', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setLoanToValueBp', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setOracle', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'supply', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'totalBorrowed', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'totalSupplied', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'withdrawable', data: BytesLike): Result;
  }

  
    export namespace ApprovalEvent {
      export type InputTuple = [owner: AddressLike, spender: AddressLike, value: BigNumberish];
      export type OutputTuple = [owner: string, spender: string, value: bigint];
      export interface OutputObject {owner: string, spender: string, value: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace BorrowedEvent {
      export type InputTuple = [farmer: AddressLike, amount: BigNumberish, newPrincipal: BigNumberish];
      export type OutputTuple = [farmer: string, amount: bigint, newPrincipal: bigint];
      export interface OutputObject {farmer: string, amount: bigint, newPrincipal: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace OwnershipTransferredEvent {
      export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
      export type OutputTuple = [previousOwner: string, newOwner: string];
      export interface OutputObject {previousOwner: string, newOwner: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RepaidEvent {
      export type InputTuple = [farmer: AddressLike, amount: BigNumberish, remainingPrincipal: BigNumberish, interestPaid: BigNumberish];
      export type OutputTuple = [farmer: string, amount: bigint, remainingPrincipal: bigint, interestPaid: bigint];
      export interface OutputObject {farmer: string, amount: bigint, remainingPrincipal: bigint, interestPaid: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace SuppliedEvent {
      export type InputTuple = [lp: AddressLike, amount: BigNumberish, lpMinted: BigNumberish];
      export type OutputTuple = [lp: string, amount: bigint, lpMinted: bigint];
      export interface OutputObject {lp: string, amount: bigint, lpMinted: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace TransferEvent {
      export type InputTuple = [from: AddressLike, to: AddressLike, value: BigNumberish];
      export type OutputTuple = [from: string, to: string, value: bigint];
      export interface OutputObject {from: string, to: string, value: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace WithdrawnEvent {
      export type InputTuple = [lp: AddressLike, amount: BigNumberish, lpBurned: BigNumberish];
      export type OutputTuple = [lp: string, amount: bigint, lpBurned: bigint];
      export interface OutputObject {lp: string, amount: bigint, lpBurned: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface LendingPool extends BaseContract {
    
    connect(runner?: ContractRunner | null): LendingPool;
    waitForDeployment(): Promise<this>;

    interface: LendingPoolInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    DOMAIN_SEPARATOR: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    LIQUIDATION_BPS: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    MAX_BPS: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    activatePledge: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    allowance: TypedContractMethod<
      [owner: AddressLike, spender: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    approve: TypedContractMethod<
      [spender: AddressLike, value: BigNumberish, ],
      [boolean],
      'nonpayable'
    >
    

    
    balanceOf: TypedContractMethod<
      [account: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    borrow: TypedContractMethod<
      [amount: BigNumberish, ],
      [boolean],
      'nonpayable'
    >
    

    
    borrowRateBp: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    borrowWithPermit: TypedContractMethod<
      [amount: BigNumberish, farmer: AddressLike, deadline: BigNumberish, v: BigNumberish, r: BytesLike, s: BytesLike, ],
      [boolean],
      'nonpayable'
    >
    

    
    borrowable: TypedContractMethod<
      [farmer: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    deactivatePledge: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    decimals: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    farmerPositions: TypedContractMethod<
      [arg0: AddressLike, ],
      [[bigint, bigint] & {principal: bigint, borrowedAt: bigint }],
      'view'
    >
    

    
    fiat: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    liquidate: TypedContractMethod<
      [farmer: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    loanToValueBp: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    ltvBps: TypedContractMethod<
      [farmer: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    name: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    nonces: TypedContractMethod<
      [arg0: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    oracle: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    outstanding: TypedContractMethod<
      [farmer: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    owner: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    registry: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    renounceOwnership: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    repay: TypedContractMethod<
      [amount: BigNumberish, behalfOf: AddressLike, ],
      [bigint],
      'nonpayable'
    >
    

    
    setBorrowRateBp: TypedContractMethod<
      [bps: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    setLoanToValueBp: TypedContractMethod<
      [bps: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    setOracle: TypedContractMethod<
      [_oracle: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    supply: TypedContractMethod<
      [amount: BigNumberish, behalfOf: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    symbol: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    totalBorrowed: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    totalSupplied: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    totalSupply: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    transfer: TypedContractMethod<
      [to: AddressLike, value: BigNumberish, ],
      [boolean],
      'nonpayable'
    >
    

    
    transferFrom: TypedContractMethod<
      [from: AddressLike, to: AddressLike, value: BigNumberish, ],
      [boolean],
      'nonpayable'
    >
    

    
    transferOwnership: TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    withdraw: TypedContractMethod<
      [amount: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    withdrawable: TypedContractMethod<
      [account: AddressLike, ],
      [bigint],
      'view'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'DOMAIN_SEPARATOR'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'LIQUIDATION_BPS'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'MAX_BPS'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'activatePledge'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'allowance'): TypedContractMethod<
      [owner: AddressLike, spender: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'approve'): TypedContractMethod<
      [spender: AddressLike, value: BigNumberish, ],
      [boolean],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'balanceOf'): TypedContractMethod<
      [account: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'borrow'): TypedContractMethod<
      [amount: BigNumberish, ],
      [boolean],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'borrowRateBp'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'borrowWithPermit'): TypedContractMethod<
      [amount: BigNumberish, farmer: AddressLike, deadline: BigNumberish, v: BigNumberish, r: BytesLike, s: BytesLike, ],
      [boolean],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'borrowable'): TypedContractMethod<
      [farmer: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'deactivatePledge'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'decimals'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'farmerPositions'): TypedContractMethod<
      [arg0: AddressLike, ],
      [[bigint, bigint] & {principal: bigint, borrowedAt: bigint }],
      'view'
    >;
getFunction(nameOrSignature: 'fiat'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'liquidate'): TypedContractMethod<
      [farmer: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'loanToValueBp'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'ltvBps'): TypedContractMethod<
      [farmer: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'name'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'nonces'): TypedContractMethod<
      [arg0: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'oracle'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'outstanding'): TypedContractMethod<
      [farmer: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'owner'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'registry'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'renounceOwnership'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'repay'): TypedContractMethod<
      [amount: BigNumberish, behalfOf: AddressLike, ],
      [bigint],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'setBorrowRateBp'): TypedContractMethod<
      [bps: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'setLoanToValueBp'): TypedContractMethod<
      [bps: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'setOracle'): TypedContractMethod<
      [_oracle: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'supply'): TypedContractMethod<
      [amount: BigNumberish, behalfOf: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'symbol'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'totalBorrowed'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'totalSupplied'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'totalSupply'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'transfer'): TypedContractMethod<
      [to: AddressLike, value: BigNumberish, ],
      [boolean],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'transferFrom'): TypedContractMethod<
      [from: AddressLike, to: AddressLike, value: BigNumberish, ],
      [boolean],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'transferOwnership'): TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'withdraw'): TypedContractMethod<
      [amount: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'withdrawable'): TypedContractMethod<
      [account: AddressLike, ],
      [bigint],
      'view'
    >;

    getEvent(key: 'Approval'): TypedContractEvent<ApprovalEvent.InputTuple, ApprovalEvent.OutputTuple, ApprovalEvent.OutputObject>;
getEvent(key: 'Borrowed'): TypedContractEvent<BorrowedEvent.InputTuple, BorrowedEvent.OutputTuple, BorrowedEvent.OutputObject>;
getEvent(key: 'OwnershipTransferred'): TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
getEvent(key: 'Repaid'): TypedContractEvent<RepaidEvent.InputTuple, RepaidEvent.OutputTuple, RepaidEvent.OutputObject>;
getEvent(key: 'Supplied'): TypedContractEvent<SuppliedEvent.InputTuple, SuppliedEvent.OutputTuple, SuppliedEvent.OutputObject>;
getEvent(key: 'Transfer'): TypedContractEvent<TransferEvent.InputTuple, TransferEvent.OutputTuple, TransferEvent.OutputObject>;
getEvent(key: 'Withdrawn'): TypedContractEvent<WithdrawnEvent.InputTuple, WithdrawnEvent.OutputTuple, WithdrawnEvent.OutputObject>;

    filters: {
      
      'Approval(address,address,uint256)': TypedContractEvent<ApprovalEvent.InputTuple, ApprovalEvent.OutputTuple, ApprovalEvent.OutputObject>;
      Approval: TypedContractEvent<ApprovalEvent.InputTuple, ApprovalEvent.OutputTuple, ApprovalEvent.OutputObject>;
    

      'Borrowed(address,uint256,uint256)': TypedContractEvent<BorrowedEvent.InputTuple, BorrowedEvent.OutputTuple, BorrowedEvent.OutputObject>;
      Borrowed: TypedContractEvent<BorrowedEvent.InputTuple, BorrowedEvent.OutputTuple, BorrowedEvent.OutputObject>;
    

      'OwnershipTransferred(address,address)': TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
      OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
    

      'Repaid(address,uint256,uint256,uint256)': TypedContractEvent<RepaidEvent.InputTuple, RepaidEvent.OutputTuple, RepaidEvent.OutputObject>;
      Repaid: TypedContractEvent<RepaidEvent.InputTuple, RepaidEvent.OutputTuple, RepaidEvent.OutputObject>;
    

      'Supplied(address,uint256,uint256)': TypedContractEvent<SuppliedEvent.InputTuple, SuppliedEvent.OutputTuple, SuppliedEvent.OutputObject>;
      Supplied: TypedContractEvent<SuppliedEvent.InputTuple, SuppliedEvent.OutputTuple, SuppliedEvent.OutputObject>;
    

      'Transfer(address,address,uint256)': TypedContractEvent<TransferEvent.InputTuple, TransferEvent.OutputTuple, TransferEvent.OutputObject>;
      Transfer: TypedContractEvent<TransferEvent.InputTuple, TransferEvent.OutputTuple, TransferEvent.OutputObject>;
    

      'Withdrawn(address,uint256,uint256)': TypedContractEvent<WithdrawnEvent.InputTuple, WithdrawnEvent.OutputTuple, WithdrawnEvent.OutputObject>;
      Withdrawn: TypedContractEvent<WithdrawnEvent.InputTuple, WithdrawnEvent.OutputTuple, WithdrawnEvent.OutputObject>;
    
    };
  }